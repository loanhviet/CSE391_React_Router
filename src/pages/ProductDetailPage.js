import React, { useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';

function ProductDetailPage() {
  let { id } = useParams();
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState('description');
  
  // Mock product data - in a real app, this would come from an API
  const products = {
    '1': {
      name: "Premium Widget",
      price: "$99.99",
      originalPrice: "$129.99",
      rating: 4.8,
      reviewCount: 124,
      description: "ƒê√¢y l√† s·∫£n ph·∫©m Premium Widget ph·ªï bi·∫øn nh·∫•t c·ªßa ch√∫ng t√¥i. S·∫£n ph·∫©m ƒëi k√®m v·ªõi b·∫£o h√†nh tr·ªçn ƒë·ªùi v√† ho√†n h·∫£o cho m·ªçi nhu c·∫ßu widget c·ªßa b·∫°n.",
      details: "Premium Widget ƒë∆∞·ª£c ch·∫ø t·∫°o t·ª´ v·∫≠t li·ªáu ch·∫•t l∆∞·ª£ng cao v√† ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ s·ª≠ d·ª•ng trong nhi·ªÅu nƒÉm. ƒê√¢y l√† m·ªôt b·ªï sung ho√†n h·∫£o cho b·ªô c√¥ng c·ª• c·ªßa b·∫°n, v·ªõi c√°c ƒëi·ªÅu khi·ªÉn tr·ª±c quan v√† ho·∫°t ƒë·ªông li·ªÅn m·∫°ch.",
      features: ["V·∫≠t li·ªáu ch·∫•t l∆∞·ª£ng cao", "C·∫•u tr√∫c b·ªÅn b·ªâ", "D·ªÖ s·ª≠ d·ª•ng", "B·∫£o h√†nh tr·ªçn ƒë·ªùi"],
      specs: {
        "K√≠ch th∆∞·ªõc": "10 x 5 x 2 inches",
        "Tr·ªçng l∆∞·ª£ng": "1.5 lbs",
        "V·∫≠t li·ªáu": "Nh√¥m h√†ng kh√¥ng",
        "B·∫£o h√†nh": "Tr·ªçn ƒë·ªùi"
      },
      related: [2]
    },
    '2': {
      name: "Deluxe Gadget",
      price: "$149.99",
      originalPrice: "$199.99",
      rating: 4.6,
      reviewCount: 89,
      description: "Thi·∫øt b·ªã t·ªëi ∆∞u cho nh·ªØng ng∆∞·ªùi ƒëam m√™ c√¥ng ngh·ªá. Phi√™n b·∫£n Deluxe n√†y bao g·ªìm t·∫•t c·∫£ c√°c t√≠nh nƒÉng b·∫°n c·∫ßn v√† h∆°n th·∫ø n·ªØa.",
      details: "Deluxe Gadget th·ªÉ hi·ªán ƒë·ªânh cao c·ªßa c√¥ng ngh·ªá hi·ªán ƒë·∫°i. V·ªõi kh·∫£ nƒÉng t√≠ch h·ª£p th√¥ng minh v√† ch·ª©c nƒÉng kh√¥ng d√¢y, n√≥ k·∫øt n·ªëi li·ªÅn m·∫°ch v·ªõi t·∫•t c·∫£ c√°c thi·∫øt b·ªã c·ªßa b·∫°n ƒë·ªÉ mang l·∫°i tr·∫£i nghi·ªám th·ª±c s·ª± hi·ªán ƒë·∫°i.",
      features: ["C√¥ng ngh·ªá ti√™n ti·∫øn", "T√≠ch h·ª£p th√¥ng minh", "Kh·∫£ nƒÉng kh√¥ng d√¢y", "Pin s·∫°c"],
      specs: {
        "K√≠ch th∆∞·ªõc": "8 x 4 x 1.5 inches",
        "Tr·ªçng l∆∞·ª£ng": "0.8 lbs",
        "Th·ªùi l∆∞·ª£ng pin": "12 gi·ªù",
        "K·∫øt n·ªëi": "Bluetooth 5.0, Wi-Fi"
      },
      related: [1]
    }
  };
  
  const product = products[id] || {
    name: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m",
    price: "N/A",
    originalPrice: "N/A",
    rating: 0,
    reviewCount: 0,
    description: "S·∫£n ph·∫©m b·∫°n y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i.",
    details: "",
    features: [],
    specs: {},
    related: []
  };
  
  // Go back to previous page
  const handleGoBack = () => {
    navigate(-1); // useNavigate's -1 simulates browser back button
  };

  // Add to cart functionality (would connect to actual cart in a real app)
  const handleAddToCart = () => {
    alert(`ƒê√£ th√™m ${product.name} v√†o gi·ªè h√†ng!`);
  };

  // Generate star rating display
  const renderStars = (rating) => {
    const stars = [];
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    
    for (let i = 0; i < 5; i++) {
      if (i < fullStars) {
        stars.push(<span key={i} style={{color: '#f39c12'}}>‚òÖ</span>);
      } else if (i === fullStars && hasHalfStar) {
        stars.push(<span key={i} style={{color: '#f39c12'}}>‚òÖ</span>);
      } else {
        stars.push(<span key={i} style={{color: '#ccc'}}>‚òÖ</span>);
      }
    }
    
    return stars;
  };

  return (
    <div className="main-content page-transition">
      <div className="container">
        <div className="breadcrumb">
          <Link to="/">Trang ch·ªß</Link> &gt; <Link to="/products">S·∫£n ph·∫©m</Link> &gt; {product.name}
        </div>
        
        <div className="product-detail">
          <div className="product-detail-image">
            {id}
            {product.originalPrice !== product.price && (
              <div className="discount-badge">Gi·∫£m gi√°</div>
            )}
          </div>
          
          <div className="product-detail-info">
            <h2>{product.name}</h2>
            
            <div className="rating-container">
              <div className="stars">{renderStars(product.rating)}</div>
              <span className="review-count">{product.reviewCount} ƒë√°nh gi√°</span>
            </div>
            
            <div className="price-container">
              <h3 className="product-price">{product.price}</h3>
              {product.originalPrice !== product.price && (
                <span className="original-price">{product.originalPrice}</span>
              )}
              {product.originalPrice !== product.price && (
                <span className="discount-percentage">
                  {Math.round((1 - parseFloat(product.price.replace('$', '')) / parseFloat(product.originalPrice.replace('$', ''))) * 100)}% GI·∫¢M
                </span>
              )}
            </div>
            
            <div className="purchase-options">
              <div className="quantity-selector">
                <button className="quantity-btn">-</button>
                <input type="text" className="quantity-input" value="1" readOnly />
                <button className="quantity-btn">+</button>
              </div>
              
              <button className="btn btn-primary add-to-cart-btn" onClick={handleAddToCart}>
                <i className="cart-icon">üõí</i> Th√™m v√†o gi·ªè
              </button>
              
              <button className="wishlist-btn" title="Th√™m v√†o danh s√°ch y√™u th√≠ch">‚ù§</button>
            </div>
            
            <div className="tab-navigation">
              <button 
                className={`tab-btn ${activeTab === 'description' ? 'active' : ''}`}
                onClick={() => setActiveTab('description')}
              >
                M√¥ t·∫£
              </button>
              <button 
                className={`tab-btn ${activeTab === 'features' ? 'active' : ''}`}
                onClick={() => setActiveTab('features')}
              >
                T√≠nh nƒÉng
              </button>
              <button 
                className={`tab-btn ${activeTab === 'specs' ? 'active' : ''}`}
                onClick={() => setActiveTab('specs')}
              >
                Th√¥ng s·ªë k·ªπ thu·∫≠t
              </button>
            </div>
            
            <div className="tab-content">
              {activeTab === 'description' && (
                <div className="tab-pane">
                  <p>{product.description}</p>
                  <p>{product.details}</p>
                </div>
              )}
              
              {activeTab === 'features' && (
                <div className="tab-pane">
                  <ul className="feature-list">
                    {product.features.map((feature, index) => (
                      <li key={index} className="feature-item">{feature}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              {activeTab === 'specs' && (
                <div className="tab-pane">
                  <table className="specs-table">
                    <tbody>
                      {Object.entries(product.specs).map(([key, value]) => (
                        <tr key={key}>
                          <td className="spec-name">{key}</td>
                          <td className="spec-value">{value}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
            
            <div className="action-buttons">
              <button className="btn btn-secondary" onClick={handleGoBack}>
                Quay l·∫°i
              </button>
            </div>
          </div>
        </div>
        
        {/* Related Products */}
        {product.related.length > 0 && (
          <div className="related-products">
            <h3>S·∫£n ph·∫©m li√™n quan</h3>
            <div className="related-products-grid">
              {product.related.map(relatedId => {
                const relatedProduct = products[relatedId];
                return (
                  <div key={relatedId} className="product-card" onClick={() => navigate(`/products/${relatedId}`)}>
                    <div className="product-image">{relatedId}</div>
                    <div className="product-info">
                      <h4 className="product-title">{relatedProduct.name}</h4>
                      <p className="product-price">{relatedProduct.price}</p>
                      <Link to={`/products/${relatedId}`} className="view-button">Xem s·∫£n ph·∫©m</Link>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}
        
        {/* Tech showcase - Dynamic Routes */}
        <div className="tech-showcase">
          <h3>ƒêi·ªÉm n·ªïi b·∫≠t k·ªπ thu·∫≠t: Route Parameters</h3>
          <p>Trang n√†y minh h·ªça <code>useParams</code>, m·ªôt hook c·ªßa React Router gi√∫p truy c·∫≠p c√°c ph·∫ßn ƒë·ªông trong URL.</p>
          
          <pre>
            <code>{`// Trong ƒë·ªãnh nghƒ©a Route
<Route path="/products/:id" element={<ProductDetailPage />} />

// Trong component
import { useParams } from 'react-router-dom';

function ProductDetailPage() {
  const { id } = useParams(); // id s·∫Ω l√† "${id}" trong tr∆∞·ªùng h·ª£p n√†y
  // ...
}`}</code>
          </pre>
          
          <p>Th·ª≠ xem c√°c s·∫£n ph·∫©m kh√°c nhau:</p>
          <div className="product-links">
            <Link to="/products/1" className="product-link">S·∫£n ph·∫©m 1</Link>
            <Link to="/products/2" className="product-link">S·∫£n ph·∫©m 2</Link>
            <Link to="/products/3" className="product-link">S·∫£n ph·∫©m 3 (Kh√¥ng t√¨m th·∫•y)</Link>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ProductDetailPage; 